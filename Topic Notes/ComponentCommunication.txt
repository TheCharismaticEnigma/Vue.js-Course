SECTION: 
Component Reusability and Communication:  

Mechanisms for component communication: 
1. PROPS AND EVENTS. (parent->child & child->parent respectively)
2. PROVIDE AND INJECT. (for pass through components)

TOPIC: Props(Properties) (Parent => Child Communication)

- For components, they should be reusable. With exclusive logic
styles, and markup BUT DATA SHOULDN'T BE statically stored. 
Like custom JAVA classes. 

- App/Another component that uses current component must pass 
data. So that each usage outputs different data. 

- Props are used for that. Syntax is similar to that of HTML 
attributes. (custom HTML attributes)
- Use lower-kebab-case syntax. 

IMPORTANT: Vue must be notified of props else they'd be 
ignored as they aren't HTML attributes. 

CODE IN COMPONENT FILE (.vue)/ Single file component : 

In component file's Configuration object, use PROPS property
to make vue aware of these custom attributes on component.
 
- Key name is the SAME NAME that was given to the property 
in HTML but here in camelCase. 
(Under the hood vue will understand). 
- Usage (Interpolation and v-bind syntax) is same as 
data properties. 

NOTE: In simplest form, props takes an array. 

- the key-names of PROPS shouldn't collide with data properties 
or computed properties. 
- LIKE data properties, props will be available in entire 
vue app. They will be stored in BTS managed global object. 
So accessible using 'this' keyword. 

- In template (HTML), same syntax to output data 
/bind to attributes.


TOPIC: Prop behavior and Changing Props(Properties)

- Props are used to connect PARENT AND CHILD. Passing data 
from parent -> child. 

Ex. FriendContact component => CHILD of App Component
    App Component => PARENT of FriendContact component 

WHY? 
FriendContact component's used in the Template(HTML) of APP. 

IMPORTANT: 

- VALUE of PROPS SHOULD NOT be mutated.
 (that was initially passed to custom html attribute/prop)

WHY? Vue uses UNIDIRECTIONAL data-flow. (DATA passed from parent 
to child component SHOULD ONLY BE MODIFIED IN PARENT component)

For changing the props value => 2 APPROACHES: 

1. Let PARENT know that data must be changed => IT Modfies data 
in parent itself => passes updated data to child component.

2. Take Received Prop value as INITIAL value.
- MAKE SURE value modifications are exclusive to CHILD COMPONENT 
AND WON'T AFFECT data in the parent component. 

For implmentation: 
Create a new data property -> set it to this.propsProperty
Now you can change the component-exclusive data property


TOPIC: VALIDATING PROPS: 

- in a complex app, more information about the props is 
exepected. (and not just an []) for validation purposes. 
So, pass an object instead. 

<componentName name="sas" age="12" > </componentName
>
Ex. props: { 
    name: {type: String, required: true}, 
    age: {type: String, required: true}, 
    isFavorite: { 
        type: Boolean,
        required: false, 
        default: false,
        validator: function(value) { ... check if provided value is valid.}
    }
}

NOTE: Default value is used when prop is missing (not specified)
Value of default can be a function too 

NOTE: Get error if provided value in component tag doesn't
match the structure of prop in config object of Component file. 

NOTE: For detailed prop definitions key-value pairs,
 see documentation. 

IMPORTANT TOPIC: 

Dynamic PROP VALUES: 
------------------ 

- by default VALUE for props can only be of type STRING. 
(Like HTML attributes)

NOTE: v-for="" and v-bind:propKey ="" CAN BE USED ON OUR CUSTOM
COMPONENTS. 

THIS enables use of Dynamic VALUES for props too. 
Can execute JS expression/method/set values of any data type for
props

(v-bind: tells vue to set the value of a HTML attribute ) 

Ex. <customComponent
     v-for="friend in friends"
     v-bind:key="friend.key"
     v-bind:name="friend.name"
     :age="friend.age"
    > </customComponent>

creating one custom component for each friend. 

Props => from APP/parent component to child component. 


TOPIC: Communication from CHILD => PARENT component
(Emits) 

- Some values when changed in Child Component, MUST ALSO BE 
UPDATED BACK in Parent Component. 

- Communication from CHILD => PARENT component is needed.
 (opposite of props). Done using CUSTOM EVENTS.

HOW ?  
- when button is clicked => click event is emitted => parent can
listen.
 Similarly, If CUSTOM COMPONENT wants to communicate with 
PARENT component, IT EMITS a custom-event which parent can 
listen to and handle there. 

- this.$emit() => shipped with Vue. Can be called from inside of a 
vue component. 

- this.$emit() enables us to emit CUSTOM EVENT that can be 
listened in the parent component. 

- at least one argument (name of custom event in kebab-case) 
- FOR EVENTS NAME IS ALWAYS IN lower-kebab-case. 
- use v-on: or @  to listen to custom events. 

- also some data needs to be passed to let the parent know 
which of the CHILD component changed a property. 
- Can pass any number of arguments after the custom-name, all 
these will be DATA that was updated. 
(DATA will be received as an argument to the method which handles 
the event in parent component)

- VUE automatically takes the updated data value from parent 
component and passes back to child component, so we don't 
have to explicitly update the SAME data in child component
once again. 


UNIDIRECTIONAL data flow in both ways: 

1. Data changes in Child Component. 
2. Child component emits an event using this.$emit() method. 
3. Listen in parent using @/v-on:custom-name="methodName" 
4. Update data in parent component. 
5. Parent takes the updated data => passes to child component. 
6. Same data is automatically updated in child component too. 


TOPIC: 
Defining and Validating CUSTOM EVENTS: 

- similar to props{}, emits{} property in config object.
- Recommended property if custom-events are emitted. 

- in props, the STRUCTURE/SHAPE of received props is defined. In
emits{}, Structure of CUSTOM EVENTS that'll be emitted from the
component is defined. 

- part of documentation of component. 

- BASIC:
 emits: ['custom-event1-name', 'custom-event2-name]

- DETAILED: 
 emits: { 
    'custom-event1-name': function(data that'll be emitted) { 
        // unlike props, value is function and not object. 
        // validation can be added. 
     }
 }

NOTE: 

Props and events added on a custom component tag automatically 
fall through to the root component in the template of that 
component. In the above example, 
type and @click get added to the <button> 
in the BaseButton component.

BButton => <template>
<button></button>
</template>

- access to these fallthrough props on a 
built-in $attrs property (e.g. this.$attrs).

- handy to build "utility" or pure presentational components 
where you don't want to define all props & events individually.

NOTE: Binding all PROPS:

With v-bind="person" you pass all key-value pairs inside of 
person as props to the custom component. 
That of course requires person to be a JavaScript object.

ex. <custom-component
     :firstName="person.firstName" 
     :lastName="person.lastName"> </custom-component>

SHORTFORM: 
    <custom-component v-bind="person">
    </custom-component>

NOTE: props => send data into a compoent 
      emits => send data out of components (custom events) 

NO  -> Large vue files with bulky template and code. 
YES => small reusable components combinded in a root Component (App.vue)

NOTE: $event can be used as an alternative if you don't want to 
provide an argument to handle the custom event (emit) from 
the child. And want to pass on to another component to handle it. 


Pass Through problem in components: 
----------------------------------

- we wanna pass some value from ancestor component 
to a deeply nested component without Passing through 
other components in between. (directly) 

- not actually a problem. 

- alternative can be used: 
PROVIDE + INJECT instead of PROPS AND CUSTOM EVENTS.

A parent component can serve as a dependency provider for 
all its descendants. Any component in the descendant tree, 
regardless of how deep it is, can inject dependencies 
provided by components up in its parent chain.

provide: function() {
     return {key:value} 
} option 

keys  - used to detect the value
value - actually gets injected and used by descendants.

use function to access this keyword so that data properties
from a component can be provided. 

To inject, use inject option. Also available on this.
inject: ['name']
Ex. 
In descendant, data() { return { fullName: this.name; }}

IMPORTANT NOTE:  
- provide + inject NEEDS parent-child relation. 
- Doesn't work with neighbors. 

- Can use provide and inject for methods too. IN JS, methods are 
treated as variables. (first-class functions). 
While providing point at it and while injecting it, make SURE it
gets all the arguments.  

- PROPS AND EVENTS -> default communication mechanism
Use provide and inject WHEN YOU HAVE PASS THROUGH 
components that pass data through props and custom-events. (emits)

SECTION: 
Deep Dive into Components:

TOPIC: 
Global and Local Registration: 

registering a component directly on app using component('name-space', object) 
is global. Component is available anywhere in ROOT app. 

LOCAL : Component WILL ONLY BE AVAILABLE inside this 
parent component. (not even its children. Only on this component
which is importing it)

<script>
import Component from './components/Component.vue' ; 

export default { 
    components: { 
        'custom-html-element': Component ; // syntax1 
        Component:Component; // syntax2 
    }
}
</script>

NOTE: in syntax1, NO AUTO-CLOSING TAG. <html-element></html-element>
in syntax2, we have auto-closing tag.   <Component/>

TOPIC: 
Scoped Styling: 

- Generally, wherever you'd add styles, they'd be treated as 
global styles (affecting entire application) and not just that specific 
component. 
- Can lead to style clashes and confusions.

- In APP.vue (root component) -> define GLOBAL STYLES for entire app
- In specific SFCs, specify scoped styles exclusive to those component files.

- ADD SCOPED ATTRIbute on style tag. 

- In browser, tags are given special data attributes. And the styles 
are applied after selecting the elements with those attributes. 
ex. section h2[data-v-5521122]

TOPIC: SLOTS
-------------

- <slot> </slot>
- allow/permit the reception of HTML content using vue-features. 

- used when you wanna wrap your component around some other html 
code which ALSO uses vue feature (around dynamic content)

- props are used for DATA a component needs. 
- slots are used for HTML content a component needs. 

- ex. wrapping a section inside a card component to make it a 
card-styled section. 

NOTE: 
NAMED SLOTS: used when custom component can have MULTIPLE SLOTs.
for dynamic content. 

<slot name="customSlotName"></slot>

In other component where we use this, wrap the content that we'd
like this wrapper to wrap in 

<template v-slot:customSlotName></template>
<template v-slot:default></template>

- wrapped in template tag because it's ignored by browser 

v-slot ==> tells vue where certain element should go to. 

v-slot:default => content will go in default slot 

SHORTHAND for v-slot:name ==> #name 
# can be used instead of v-slot 

TOPIC: Slot style
----------------

- dynamically added data will adhere to styles scoped to the component
in which they're added. 

- first all the content is analyzed and compiled. Prop values 
are inserted and then the content is sent to other component (in which
it is styled)

TOPIC: DEFAULT CONTENT 

- if no content was passed inside a slot (named or default) then 
the default HTML content (IF PROVIDED) BETWEEN THE slot tag
 will be used and rendered. 

- USED ONLY IF Content is not provided from somewhere else. 

NOTE: Another feature (for default content) instead of writing 
 HTML between slots

- this.$slots => information related to content passed in slots. 
this.$slots.slotName => returns header or content inside it in form of object. 

IF undefined, then we can set it to desired value. 
USE v-if="" for evaluation of content in slots. (on the container containing <slot></slot>) 


TOPIC: SCOPED SLOTS (Infrequent use)

WHY? 
- SENDING data FROM component where SLOTS are DEFINED to 
the component which provides the Markup for the slots. 
(parent->child communication)

HOW?
- by passing data like props to the slot. 
Can use :name="" to bind the prop value dynamically. 

- the data passed in slot prop will be accessible in the 
component where MARKUP for slot is provided. 

<template v-slot:default="nameSpaceForObject">
.... Prop Markup 
</template>

NOTE: this object (nameSpaceForObject) contains all the data provided as 
prop by component declaring the slot. 

IMPORTANT: Vue doesn't convert the props here in CAMEL casew
when accessing. Access using same name. 
Ex. <p>{{nameSpaceForObject.['another-prop']}}</p>

IMPORTANT: 
By default, scoped styles do not affect contents rendered
by <slot/>.

WHY? 
- they are considered to be owned by the 
parent component passing them in. 
To explicitly target slot content, use the :slotted() 
pseudo-class. 

TOPIC: DYNAMIC COMPONENTS: 

- used for switching components based dynamically. 

<component :is="condition"></component>
- instead of having multiple condiitions with v-if directives, have once
component tag and bind the value of is to show the component name.

- is property tells vue which component should be replaced 
and rendered INSTEAD of the <component:is=""></component> tag. 

TOPIC: Keeping components ALIVE. 

- STATE of the component is lost (values in inputs etc) 
when component is switched in the case of dynamic components. 

- If component must be kept alive: use keep-alive tag to wrap 
around component tag.

 <keep-alive> 
    <component :is=""></component>
 </keep-alive>

- BTS components are cached and not entirely removed. 

TOPIC: TELEPORTING elements: 

- built in teleport component. 

- rendering elements that are deeply nested AT THE ROOT 
level. Ex. error content and overlay should be rendered at the 
root level. 

- <teleport to="SELECTOR"> 
  .... content that must be teleported. 
</teleport>

- the selector will be a CSS selector selecting an HTML element
on our entire app in which's HTML template 
we want this content to be appeneded 

- Rendered somewhere else in DOM structure. But on the screen 
appears like before. 

NOTE: Fragments
- Can have as many top level elements (elements not inside a particular
root element/wrapper) per template. 

VUE-STYLING: 
-----------  (vue style guide) 

FOLDER STRUCTURE: 
- have individual folders for components with similar purposes
Ex. components/UI/BaseCard.vue 
Ex. layout/TheHeader.vue 

- sub-folders based on features Ex. cart, map
- PREFER LOCAL component registeration using components{} option. 

- Global components only for bleeding components that're 
reused multiple times in all components. 

- in app.vue set up global styles. In other components, 
use scoped styles exclusive to those components. 