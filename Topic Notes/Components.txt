SECTION: 

Vue Components: 
--------------

- Reusable pieces of HTMl with exclusive CONNECTED DATA AND 
LOGIC/BEHAVIOUR and also styles. The HTML template, functionality
and styles must be exclusive to that component.
- Used like they're HTML elements 
Ex. <componentName></componentName> in other components. 

- Also enable us to split large project into small reusable parts with 
each serving a purpose. 

- should be named with a '-' with a custom name to avoid clashing with
original HTML tag names. 

- Like a mini-vue app 'CONNECTED TO THE main app'. 
Component data is exclusive & can't be accessed outside itself. 

NOTE: For components, we give a template not using .mount() but 
using the template option in config object. 

const app = Vue.createApp({...}) ; 

app.component('identifier-name', {
    // config object just like app's config object. 
    template: `` , 
    
    data() {return {...}; } , 

    methods: {...}, 
})

IN HTML SECTION, ONLY INSIDE our main-app template we can use the 
component like it was a normal HTML element: 
Each component will be working standalone with its own data and 
functionality. 

<identifier-name> </identifier-name>

IMPORTANT: 
We can REUSE SAME COMPONENT WITH DIFFERENT data (like Classes) and this
is what makes it powerful. 

- Encapsulated & isolated components can also be combined to form 
a big app. 

NOTE: 
Local Development web Server will serve your project via HTTP(S)
protocol.  

- Using VUE CLI (under the hood uses node.js) : 

- Additional tool used for better developer performance when using 
Vue. Helps us create & manage bigger projects. 

Create vue app/project using command :  vue create project-name 
run the live-server using ->  npm run serve 

vue cli installs dependencies and stores all packages in node modules 
directory. 

public directory: 
contains our index.html file which will contain vue app at the end

src folder -> contains all JS code we'll write. 
In src, 
main.js -> entry point (vue project BTS is configured such that it 
compiles and executes the main.js file FIRST)


TOPIC: VUE code and .vue files: 
---------------------------------

.vue files are called SINGLE FILE COMPONENTS. 
Code is split in three tags for DIFFERENT purposes in Single file vue
components. 
- <template></template>, <style></style>, and <script></script> tags
for specific code exclusive to that component/vue app.
HTML Code template , configuration code, styles  

.vue files are SPECIAL feature of VUE CLI project . 

- They allow us to write vue apps/
components in a better way and also re-use them. 

- also allow us to separate HTML template of component, some styles 
and the data and functionality in separate tags. 

- VUE CLI uses build workflow (our code is not the working code.
We define features but it's transpiled to regular JS code that 
browser understands. This is build step)

VUE CLI transpiles code during build step (BUILD WORKFLOW): 
- code in .vue files ==> During build steps ==> normal JS CODE

IN ASSETS FOLDER -> add any images used in vue app. 
Components FOLDER -> contains reusable vue components. 
We then combine all those components TO FORM THE VUE APP. (App.vue) 
Convention to name the main .vue file which contains configuration of main app
with the name of APP.vue. 
(we use components like HTML elements in this app's template) 

In App.vue, script => provide configuration for main VUE app that's going 
to be mount on the div(#app) in public directory's index.html page. 

import/export ES6 syntax is used to reuse code exported from one single file 
component and imported to another SFComponent. 
importing from package -> specify name only Ex. 'vue' 
importing from custom-file -> full path 

NOTE: In VUE CLI created projects, HTML code is mostly in the template 
tag of single file component, along with its Stylings and configuration. 
We just reuse these components. 

Each component -> min app and can talk to one another.
We have to export it if we wanna use that component. 
If CDN was used, we'd have to create template using JS string literals. 
Using VUE components syntax, we have template tag which does the job.


Convention => INSIDE src folder, create a components folder which
contains all individual components. 

Component file name must reflect the name of custom HTML element that
you'd like to create. 
USE PASCALNAMING for naming component files.
And kebab for namespaces when connecting the components to apps. 












