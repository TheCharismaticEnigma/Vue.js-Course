Creating and Connecting Vue App Instances: 
------------------------------------------ 

-VUE needs to be told which part of HTML it needs to be 
controlling . 

-If Vue controls certain HTML element, it'll also control all its 
children. 

NOTE: Ids are unique selectors. 

const app = Vue.createApp() ; // a new Vue app is created 
app.mount('#unique CSS selector selecting target element') ; 

- Connection is established between Vue app and target HTML element
using Vue.createApp({}).mount(). 
- EACH VIEW APP CAN BE CONNECTED TO and thus control, 
only  ONE SINGLE HTML ELEMENT.

- We use Vue features to interact with the element. 
- Done by passing an object to .createApp() method. In this object, 
we configure various Options of this app. 

IMPORTANT NOTE: This object has FIXED key-value pairs. 
No arbitrary key names and values  must be used. 

const app = Vue.createApp({
    NOTE: This object CAN NOT take arbitrary key-value pairs.

    data: function() { 
        return { 
           NOTE: 
           - THIS OBJECT can take arbitrary KEY-VALUE pairs
           - These key-value pairs stored in the object returned by function 
           mapped to data property can be used in VUE-Controlled HTML
        }
    }
})

- Vue scans the Controlling HTML and Detect VUE Features/
Syntax. 
- Different features for Different TASKS

Ex. Interpolation syntax ({{ key }}) -> used to output data in HTML 
which is coming from the object returned by data(){}, by referencing 
the key-name. 
- Any form (type) of data can be outputted  

- Interpolation syntax is for adding data dynamically on HTML
 elements ({{keyName}}). Only available between Opening and
 closing HTML tags. 

BINDING with "v-bind" directive: 
------------------------------- 

NOTE: A VUE directive is an extra instruction (for VUE)
It's added to HTML elements. 

NOTE: All built-in directives shipped with Vue start with v-
syntax.  Ex. v-bind (instruction to bind/set a value of HTML ATTRIBUTE)

- v-bind directive is for setting data (stored in Vue app)
to the HTML element's ATTRIBUTES (dynamically)
Ex. <a v-bind:href="vueLink"></a> 

Interpolation - adding data between HTML tags. 
v-bind - adding data to the HTML tags/to the attribute of HTML tag.

TOPIC: Methods in Vue 

- Just like data option, we have methods option. 
- This option allows you to execute functions 
- methods: { 
    NOTE: All properties in this object, need to be functions. 
    name: function() { ... }
  }

NOTE: Can use interpolation syntax or v-bind to call functions defined in 
functions object. 
Expressions are also accepted in both of these syntaxes. 
Ex. {{Math.random() + 2}} 


TOPIC: Data Inside Vue app :

- in JS, value of this is dependent on HOW the function was called 

IMPORTANT: 
- 'this' keyword in VUE references to GLOBAL INSTANCE OBJECT (Vue.createApp() object) 
Vue merges all the data returned by the object which was returned by 
data() function into this global reference object. 
So it's accessible using `this.propertyName` syntax 


TOPIC: Raw HTML w/ v-html directive :
-----------------------------------

v-html tells view that content added dynamically (using Interpolation
syntax) between the HTML tags is HTML content and should not be
interpreted as normal text. 

ex. <p v-html="methodName()"></p> OR
    <p v-html="propertyName"></p>

TOPIC: EVENT-BINDING: 

- In Vanilla Js, need to bind event listener to the element and listen to a particular 
event. 
- Ex. button.addEventListener('click', () => {
    .......
    .......
  counter++}) ; 

In VUE, 
   <button v-on:click="counter++">ADD</button>

NOTE: v-on:eventName=""
 directive is used to add event listeners to an HTML 
element as we wanna REACT ON something.
Can listen to Default Events on HTML element. 

Behind the Scenes: 
- Vue updates the DOM, gets the target elements that are supposed 
to be updated on the entire page, WITHOUT us specifying the elements 
and updates them (like we'd do in the callback function of .addEventListener()
method) 

- Vue can call certain methods when event happens and the event 
listener is applied. 
Ex. (v-on:click="functionName") OR (v-on:click="name()") ; 

- Can reference or call functions. Vue accepts both syntaxes 
but it does the right thing. 
When passing arguments, use v-on:click="name(args)" syntax.

NOTE: 
- It ain't optimal to put logic in HTML code. Most logic and 
updations must be in VUE app and HTML code should just 
output it 

- BEST EVENT to listen to on <input> element is input event.

IMPORTANT: 
Everytime we make a change, VUE updates only the element
that needs to be updated. And this is done BEHIND the Scenes
by creating a virtual DOM using a JS method and comparing 
it to our page's DOM (Forkify Project)
- It's efficient for performance. 


TOPIC: NATIVE EVENT OBJECT: 
==========================

IN JS, when you add an event listener and pass a callback, 
YOU get access to event object in that callback function as it's 
passed as an argument. 
We can override with our own argument too. 

NOTE: If we don't have any other parameters to our function, 
and only default event then use : 

<input type="text" v-on:input="name">

- function name(event) {} function  will receive event object 

NOTE: If we have other arguments then use: 

<input type="text" v-on:input="name($event, arg1,arg2)>

-function name(event, arg1, arg2) { 
    .....
}

IMPORTANT: $event is ONLY USED when our function HAS custom 
parameters and also needs the ACCESS to the event object.

NOTE: Browser default for a submit button on a form is to submit
THE FORM AND SEND AN HTTP request to the server serving thiss
app. 


TOPIC: EVENT MODIFIERS: 
---------------------- 

- Certain BUILT-IN modifiers that can be connected to the 
events that are being listened TO CHANGE THEIR BEHAVIOUR.

- Full list of supported Event Modifiers in the DOCS.
- Modifiers do what we can do manually 

- Also used to DETERMINE/CHANGE WHEN EVENT OCCURS: 

a. Having click event fire When we right click instead of
default left click.  
Ex. <button v-on:click.right=""></button>  ==> only occur when right clicked

b. Having an event trigger when CERTAIN key is pressed. 
Ex. <button v-on:keyup.enter=""> Fire with Enter Key Only </button>

Ex. preventDefault() for forms or links 

<form v-on:submit="preventSubmission"></form>

Event Modifier Syntax:  
<form v-on:submit.prevent>.... </form> 

TOPIC: Locking Content with v-once: 
------------------------------ 

- For fixating a value of a data that's going to change. 
- Tells vue that any data in element should be EVALUTATED ONLY once.
Ex. Displaying an data proprety's initial value 

<p v-once>{{counter}}</p>

TOPIC: DATA BINDING + EVENT BINDING = 
                     TWO WAY BINDING 

NOTE: IF you bind the value (v-bind:value="") and listen to changes 
on the input EVENT on input HTML element (v-on:input=""), 
VUE has another directive to replace the two directives

<input type="text" v-on:input="" v-bind:value="">

IMPORTANT shortcut for above two directives: v-model="". 
VUE listens to input event on the (HTML input element) and updates
the property and then sends the 
property's value back to the input element THROUGH ITS 
VALUE ATTRIBUTE. 

<input type="text" id ="" name="" v-model:"propertyName">

WHY? Methods are not IDEAL for DATA-BINDING: 
(Behind the Scenes) 

Ex. {{methodName()}} is not IDEAL for performance-enhancement. 

-  In order to update the changes in DOM, VUE executes ALL the non-event 
bound methods because it's unsure if those method contain the changes that need 
to be updated and shown to the user. 
- This is not wrong but also not performance-enhancing.

IMPORTANT: 
TOPIC: COMPUTED PROPERTIES: 

- Defined in the 3rd Configuration option (data(){},methods:{},computed:{}) in
 configure object passed to vue app.

- Similar to Methods.  
- Difference: VUE Is aware of their DEPENDENCIES. Only RE-EXECUTED if 
the dependencies is CHANGED. 

- computed (like methods) takes an object in which we define methods
but they're CALLED and EXECUTED Differently. 

- These computed properties are USED LIKE PROPERTIES and not methods
(like getters and setters in vanilla JS) even though they're methods

- You just point at it like a variable. VUE BEHIND the scenes calls it.
- Vue caches the computed properties and stores it. And only if a dependency
used in the computed property is changed, then it is re-executed. 

- IMPORTANT: FOR OUTPUTING VALUES: use computed properties instead of 
methods. USE methods FOR RECALCULATING VALUES WHENEVER ANYTHING IS 
CHANGED. 

METHODS are used to bind with events and not computed properties.
When an event occurs, then it is handled using a method.  

Computed properties are used to dynamically get data from multiple 
input values or from input and hardcoded value.

IMPORTANT: NO DATA AND COMPUTED PROPERTY must have same keyname.

TOPIC: WATCHERS: 
----------------

- watch:{} option to the Configuration object. 

- A function you call TELL VUE TO EXECUTE when one of its dependencies 
is changed.  

- Can be used instead of computed properties. 

IMPORTANT: 
- methods defined (key-value pairs) in watch object (watchers) SHOULD
be of the same name as DATA PROPERTIES. 
This tells VUE to reexecute this method when data property(dependency) is 
changed. 

- watcher function automatically gets the last value of data property 
as argument AND ALSO THE OLD VALUE. (optional argument) 

watch: { 
    name(value)  { value = ..... }
}

NOTE: Difference between watchers and computer properties
- We don't call this explicity in HTML, VUE does that.
It contains the logic that should be executed when the
dependency is changed. 

IMPORTANTNOTE: 
 COMPUTED PROPERTIES ARE better for dynamically getting 
data from watchers IF ONE/MORE DEPENDENCIES are changed because 
if we use watchers, FOR EACH dependency that could be changed, 
we need a separate watcher with a lot of duplication. 

WHY? do we use watchers: 
-------------------------

- When A data should be watched continuously BUT the change must 
be done very seldom 

- Ex. sending HTTP requests if a certain data changes. 
Ex. 
 watch: { 
     age(value) { 
        if (value > 100) 
            value = 0 ; 
     }
}

METHODS: 
- for event binding 
- for data that needs to be re-executed every time dependency changes. 

COMPUTED properties: 
- for data that needs to be re-evalueated when one/more dependencies
are changed. 
- for dynamically outputting data (frequenctly) 

WATCHERS: 
- NOTE: NOT DIRECTLY used in HTML TEMPLATE. (vue controlled html) 
- Used to watch data/computed properties (HAVE SAME KEYNAME) 
- only when re-evaluation is seldom and condition-based. 
Ex. http request due to change of dependency


IMPORTANT SHORTHANDS

v-on:click.right="" ====>  @click.right="" 
v-bind:value ="" =====> :value="" 


TOPIC: Dynamic Stylings with Inline Styles: 

- IN VUE, styles can be changed dynamically (in reaction to something) using
Vue, v-bind: and style binding syntax. 
( {} that can be passed as value to attributes 
  class and style. 
)

- If we bind the attributes 'CLASS' or 'STYLE', Vue has special feature
where these attribute take a JS object as value. (in which we can pass multiple
key-value pairs)

<div
 class="demo" 
 v-bind:style="{borderColor: boxIsSelected?'black':'red'}></div>

IMPORTANT NOTE: 
INLINE STYLES SHOULD BE AVOIDED as they have the most specificity


TOPIC: Adding classes dynamically using VUE: 
-------------------------------------------
ex. add class active to an element if clicked to change styles because 
inline styles are bad practice. 

<div
 v-bind:class="{demo:true, active: boxASelected}">
</div>

OTHER WAY to write : 

<div 
 class="demo" 
 v-bind:class="{active: boxASelected, class2Name: ... }"></div>

- demo will always be added as it's set to true 
- active will be added if condition is true. 
(BHS, toggling class if(event.target.closest().......)

IMPORTANT: Can use computed properties to set classes. 
Also useful when the logic to generate classes is very large. 

computed: { 
    boxAClasses() { 
        return {demo:true, active:this.boxASelected} ; 
    }
}

<div
 :class="boxAClasses"></div>


 TOPIC: Dynamic Classes in Array Syntax
 -------------------------------------- 

NOTE: The static classes must be written as string. 
 <div
  v-bind:class="['demo', {active:boxBClasses}]"></div>

- Vue Reactivity System: 
VUE Updates the DOM (only the parts that were changed) when 
the bound data is changed. 