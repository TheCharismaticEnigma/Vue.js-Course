How Vue Works BTS? 

- All the data in the data(){} property of config object, is put in
BTS managed Global object. (also methods) 

- Unlike VUE, vanilla JS is non-reactive. 

IMPORTANT:  WHY? is vue reactive.  

Vue Turns the data-object into REACTIVE object by WRAPPING data 
properties with JS feature called PROXIES. (inbuilt feature)
Vue's notifed when new value is assigned -> vue updates DOM where 
this property was used. 

TOPIC : HOW PROXIES work?

- Proxy wraps the data object.
            We can write proxy.message (same value as obj.message)

const object = { message: 'shit!'} ; 

const handlerObject = { 
    NOTE: It can set traps. Below setter function is triggered/called 
    automatically when 
    we set a new property on the proxy object. 

    set(target, key, value) { 
        target => object that was wrapper. (the above object)
    }
}

const proxy = new Proxy(object, handlerObject) ; 

NOTE: We want another property to change if message changes. 

const object = { 
    message: 'Hello' , 
    longMessage: 'World'
} ; 

const handler = { 
    set(target, key, value) { 
        if (key === 'message') 
            target.longMessage = value + 'World' ; 

        target[key] = value ; 
    }
}

const proxy = new Proxy(object, handler) ;
proxy.message = 'Champagne' ; 

NOW, proxy.longMessage will be Champagne World. 

- NOTE: Vue keeps track of elements using proxy and updates the places
where data is used as change in value triggers the set function
in handler{}. 

TOPICNOTE: Multiple Vue apps can be mounted for multiple sections of 
HTML but data to each app is exclusive and can't be accessed from
other app. 
Each Vue App works standalone. 
Parts working in sync => single app 
Parts working independently => individual app for each part. 

IMPORTANT: TEMPLATE of VUE APP --> HTML part controlled by VUE. 
By mounting the vue app on HTML part, the HTML part becomes TEMPLATE
of vue app. 

NOTE: Multiple ways of adding template to VUE app. 
1. Normal way. (mounting) 
2. Using 'template' option on config object.

TOPIC: 
WORKING WITH REFS: ~

IMPORTANT: ALL vue provided properties START with '$'. 
Ex. $event, $refs 

- ALLOWS to retrieve values from DOM elements WHEN YOU NEED THEM 
instead of all the time. 
- Can add refs to any HTML elements. Ex. input, p, etc. 

<input type="text" ref="stringIdentifier">

methods: { 
    setText() { 
     NOTE: this.$refs is an object with key-value pairs where key
        is the string identifier and value is the value of
        the entire HTML element. 

      this.$refs.stringIdentifier will reference HTML input element. 
      And to get value, 
      this.$refs.stringIdentifier.value 
    }
}

Using refs we only access the value of input when setText() is
called and not everytime input event is fired. 

TOPIC: 
HOW VUE updates DOM ? 

- Using Proxy() VUE keeps track of modified data and also the 
locations where update is needed.But how is DOM actually updated?

- Because If real DOM was re-read on every change, 
it would be performace depleting too.  

- Using concept of VIRTUAL DOM. (VIRTUAL copy of REAL DOM. 
Managed By JS and thus existing in memory.). Because it's in memory
it's efficient to re-read. 

- When data properties are updated in VUE => JS creates new VIRTUAL
DOM => compares with previous copy => ONLY THE DIFFERENCES are 
written to REAL DOM. 

TOPIC: 
VUE INSTANCE LIFECYCLE: 

- There're various steps to render something on the screen. Sometimes 
code should be run during those steps. 

- Specific methods are called by VUE during specific phases of its 
life-cycle. And we can execute certain code during those life-cycles.
Ex. cleanup code if app is unmounted.
    HTTP request before app is mounted. 

- We've different life-cycle hooks during these different steps. 
These are methods that can be called (NOT IN METHODS OBJECT of VUE app)

- Add them anywhere in the config object of VUE APP. Can do anything in these
life-cycles (methods). Send an http request or anything.
  Ex. data(){}, methods:{}, beforeCreate(){...} 

IMPORTANT SECTION: 
LIFE-CYCLES: (Called in this same order) 

CASE a: WHEN first new Vue app is created: 
------

const app = Vue.createApp({....})

beforeCreate(){} - called before app has been fully initialized
created(){} - called after app has been initialized internally. 

(At this point VUE app has been initialized internally BUT HAS NOT 
been mounted. So nothing is rendered on screen. 
vue is aware of data properties.
Now template is compiled. 
Vue features are replaced with actual values)

app.mount('#...') ; 

beforeMount(){} - called right before vue app data is rendered on screen
mounted() {} - right after vue app is mounted. 

now we can see something on screen. Vue hands instruction 
to browser to display HTML with content defined by VUE app.  

CASE b: WHEN VUE APP DATA CHANGES in existing VUE APP 
        => TRIGGERS its own different life-cycle (hooks)
------

beforeUpdate(){} - called before data is updated to REAL DOM.
updated(){} - called RIGHT after data is updated.  

CASE c: WHEN EXISTING VUE APP IS UNMOUNTED: 
-------

- Done using  --> .unmount() method 
- Rarely Used. 

(when vue app is unmounted, all its content is removed from screen and 
app is dead)

beforeUnmount(){} - called before app is unmounted. 
unmounted() {} - after app is unmounted

NOTE: Code that needs to be executed at certain point of time during 
VUE app's LIFECYCLE can be executed in these methods. 

NOTE: 
mostly used life-cycle hooks : created(), mounted(), updated(), unmounted() 
